#include<windows.h> 
#include <iostream>  
#include <direct.h>
#include <string>
#include <string.h>
#include <atlstr.h>
#include <direct.h>

#include "SilentInstallation.h"
#include "GetExeFile.h"
#include "ExtractVersion.h"
#include  "Changejson.h"
#include "CopyFile.h"
#include "myzip.h"
#include "GetCookie.h"
#include "PostFiletoWeb.h"


typedef struct myprogress3
{
	double lastruntime;
	CURL *curl;
}myprogress3;


void gotoxy(int x, int y)//将光标设置到屏幕上的某个位置
{
	COORD coord = { x,y };//一个点，用来表示光标在屏幕中的位置
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);//设置光标位置
}

COORD getxy()//获取当前光标的位置
{
	CONSOLE_SCREEN_BUFFER_INFO SBInfo;//用于存储将要获得的环境句柄信息
	HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);//保存标准输出环境句柄
	GetConsoleScreenBufferInfo(hOut, &SBInfo);//获得环境句柄，里面包含了当前光标的位置信息
	COORD PrePo;//COORD是一个坐标类，里面是横坐标和纵坐标
	PrePo.X = SBInfo.dwCursorPosition.X;//从中取出光标的位置
	PrePo.Y = SBInfo.dwCursorPosition.Y;
	return PrePo;
}


bool tag = false;
static int older_progress(void *p, double dltotal, double dlnow, double ultotal, double ulnow)
{
	//cout << ulnow << "    " << ultotal << "    " << dltotal << "    " << dlnow << endl;
	if ((ulnow == ultotal && ulnow == 0) || (dltotal != 0) || (dlnow != 0))
	{
		;
	}
	else if (ulnow == ultotal && dltotal == 0 && dlnow == 0 && !tag)
	{
		std::cout << std::endl;
		tag = true;
	}
	else
	{
		COORD coord = getxy();
		double tmpnum = (ulnow / ultotal) * 100.0;
		char input[10] = { 0 };
		sprintf(input, "%0.1f", tmpnum);
		input[strlen(input)] = '%';
		input[strlen(input)] = '\0';

		std::cout << input << std::endl;
		gotoxy(coord.X, coord.Y);
	}
	return 0;
}

size_t CallBackWrite(const char *data, size_t size, int nmember, std::string  * strData)//写入数据的回调函数
{
	size_t sizes = size * nmember;
	strData->append(data, sizes);
	return sizes;
}


void PostHttp(const std::string cvte_url,const std::string cookie)
{
	CURL* curl;
	CURLcode res;
	struct curl_httppost *formpost = NULL;
	struct curl_httppost *lastptr = NULL;
	struct curl_slist* headerlist = NULL;

	curl_global_init(CURL_GLOBAL_ALL);

	curl_formadd
	(
		&formpost,
		&lastptr,
		CURLFORM_COPYNAME,
		"zipFile",
		CURLFORM_FILE,
		"D://SeewoService6.1.3.2572.zip",
		CURLFORM_CONTENTTYPE, "application/octet-stream",//application/zip
		CURLFORM_END
	);

	curl_formadd
	(
		&formpost,
		&lastptr,
		CURLFORM_COPYNAME,
		"exeFile",
		CURLFORM_FILE,
		"D://myouexefile/6.0/SeewoService/SeewoServiceSetup_6.1.3.2572.exe",
		CURLFORM_CONTENTTYPE, "application/x-msdownload",
		CURLFORM_END
	);

	curl_formadd
	(
		&formpost,
		&lastptr,
		CURLFORM_COPYNAME,
		"zipMd5",
		CURLFORM_COPYCONTENTS,
		"3e3105136d95fbe3888246e741406f84",
		CURLFORM_END
	);

	curl_formadd
	(
		&formpost,
		&lastptr,
		CURLFORM_COPYNAME,
		"exeMd5",
		CURLFORM_COPYCONTENTS,
		"468df6bc951f2d54f59e86cd641650dc",
		CURLFORM_END
	);

	curl_formadd
	(
		&formpost,
		&lastptr,
		CURLFORM_COPYNAME,
		"updateDesc",
		CURLFORM_COPYCONTENTS,
		"new version",
		CURLFORM_END
	);

	curl_formadd
	(
		&formpost,
		&lastptr,
		CURLFORM_COPYNAME,
		"isKeyVersion",
		CURLFORM_COPYCONTENTS,
		false,
		CURLFORM_END
	);
	std::string strHeader;
	curl = curl_easy_init();

	if (curl)
	{
		res = curl_easy_setopt(curl, CURLOPT_URL, cvte_url.c_str());
		if (res != CURLE_OK)
		{
			std::cout << "error" << std::endl;
		}
		curl_easy_setopt(curl, CURLOPT_COOKIE, "x-auth-token=eyJ0cHkiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0OTU3NzU2OTMsImlkIjoiNTkwZDNjMjI1YjY2NjQxYzQ5YmQxODMxIn0.tv91XtEBP36wHTHWRzBFtQ4QdcJiyO_aD_IZkJKj-x4; Expires=Fri, 26-May-2017 05:14:53 GMT; Path=/");

		//res = curl_easy_setopt(curl, CURLOPT_COOKIE, "x-auth-token=eyJ0cHkiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0OTY4MjYyMTgsImlkIjoiNTkwZDNjMjI1YjY2NjQxYzQ5YmQxODMxIn0.MubJYtYeRNhL-4nrHcVkb3A3751kKkEtCsN3GtBvjpc");
		if (res != CURLE_OK)
		{
			std::cout << "error" << std::endl;
		}

		curl_slist_append(headerlist, "Content-Type:mutipart/form-data");
		curl_slist_append(headerlist, "Accept:application/json");
		curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headerlist);

		res = curl_easy_setopt(curl, CURLOPT_HTTPPOST, formpost);
		if (res != CURLE_OK)
		{
			std::cout << "error" << std::endl;
		}
		res = curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, true);
		if (res != CURLE_OK)
		{
			std::cout << "error" << std::endl;
		}


		curl_easy_setopt(curl, CURLOPT_HEADERDATA, &strHeader);          //将响应头部信息保存到strRecvData
		curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, CallBackWrite);

		/****************************************************************************/

		struct myprogress3 prog;

		prog.lastruntime = 0;
		prog.curl = curl;

		res = curl_easy_setopt(curl, CURLOPT_NOPROGRESS, 0);
		if (res != CURLE_OK)
		{
			std::cout << "error" << std::endl;
		}

		res = curl_easy_setopt(curl, CURLOPT_PROGRESSFUNCTION, older_progress);
		if (res != CURLE_OK)
		{
			std::cout << "error" << std::endl;
		}
		res = curl_easy_setopt(curl, CURLOPT_PROGRESSDATA, &prog);
		if (res != CURLE_OK)
		{
			std::cout << "error" << std::endl;
		}

		res = curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0);
		if (res != CURLE_OK)
		{
			std::cout << "error" << std::endl;
		}
		res = curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0);
		if (res != CURLE_OK)
		{
			std::cout << "error" << std::endl;
		}
		curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, true);
		res = curl_easy_perform(curl);
		if (res != CURLE_OK)
		{
			fprintf(stderr, "%s\n", curl_easy_strerror(res));
		}

		curl_easy_cleanup(curl);

		curl_formfree(formpost);
		std::cout << strHeader << std::endl;
	}
}

int main()
{
	////获取当前目录下的最新版本
	//std::string tp("D://myouexefile/6.0/SeewoService");
	//GetRecentExeFile getfilename(tp);
	//std::string str;
	//getfilename.GetFilename(str);
	//std::cout << str << std::endl;

	////从路径中提取版本号
	//std::string version;
	//ExtractVersion ver;
	//ver.GetVersion(str, version);
	//std::cout << "version:" << version << std::endl;

	////更改json文件中的版本号
	//Json::Value tmp;
	//ChangeJson json(jsonpath, tmp);
	//if (json.WillChange(versionname, version))
	//{
	//	std::cout << "ok" << std::endl;
	//}

	////静默安装
	//StringNode node = { str,str2,str3,str4,str5 };
	//SilentInstallation nnode(&node);
	//std::string installationpath;
	//nnode.Run(installationpath);
	//std::cout <<"静默安装的路径"<< installationpath << std::endl;

	////复制json文件到安装目录下
	//std::string sour = jsonpath;
	//std::cout << "sour=" << sour << std::endl;
	//std::string des = installationpath;
	//des += "\\";
	//des += jsonpath;
	//std::cout << "des=" << des << std::endl;
	//CopyJsonFile copyfile(sour,des);
	//if (copyfile.Copy())
	//{
	//	std::cout << "ok" << std::endl;
	//}

	////压缩
	//std::string zippath = installationpath;
	//zippath += version;
	//zippath += ".zip";
	//ZIP zip(installationpath,zippath);
	//zip.CreateMyZip();

	//上传

	GetCookie  gcookie(getcookieurl, userpassword, contenttype);
	std::string cookie = gcookie.GetCookies();
	std::cout << cookie << std::endl;

	std::string url = "http://myou.cvte.com/api/in/policy/windowsapp/cf167a622948a3b42a7d7aacfcf3dd64f6e4d81b/version/upload";
	PostHttp(url,cookie);

	return 0;
}

//静默安装的参数
//const std::string str = "D:\\myouexefile\\6.0\\SeewoService\\SeewoServiceSetup_6.1.2.5533.exe";
//CString temp = str.c_str();
//LPCWSTR path = (LPCWSTR)(temp.AllocSysString());

//const std::string str2 = "/S";
//CString temp2 = str2.c_str();
//LPCWSTR parameters = (LPCWSTR)(temp2.AllocSysString());

//const std::string str3 = "open";
//CString temp3 = str3.c_str();
//LPCWSTR verb = (LPCWSTR)(temp3.AllocSysString());

////进行路径查询的参数
//const std::string str4 = "SOFTWARE\\Seewo\\SeewoService";
//CString temp4 = str4.c_str();
//LPCWSTR keyvalue = (LPCWSTR)(temp4.AllocSysString());

//const std::string str5 = "path";
//CString temp5 = str5.c_str();
//LPCWSTR pathvalue = (LPCWSTR)(temp5.AllocSysString()); 

//const std::string str6 = "version";
//CString temp6 = str6.c_str();
//LPCWSTR versionvalue = (LPCWSTR)(temp6.AllocSysString()); 



////静默安装
//SHELLEXECUTEINFO sei;
//ZeroMemory(&sei, sizeof(SHELLEXECUTEINFO));

//sei.cbSize = sizeof(SHELLEXECUTEINFO);
//sei.lpFile = path;
//sei.lpParameters = parameters;
//sei.nShow = SW_SHOW;
//sei.lpVerb = verb;
//sei.fMask = SEE_MASK_NOCLOSEPROCESS;
////进行静默安装
////ShellExecuteEx(&sei);
//cout << sei.hInstApp << endl;
////等待当前进程的结束
////WaitForSingleObject(sei.hProcess, INFINITE);

////安装路径、版本号的查询
//HKEY hKey;

//WCHAR szProductType2[MY_BUFSIZE];
//memset(szProductType2, 0, sizeof(szProductType2));

//WCHAR szProductType3[MY_BUFSIZE];
//memset(szProductType3, 0, sizeof(szProductType3));

//DWORD dwBufLen = MY_BUFSIZE;
//LONG lRet;
//// 下面是打开注册表, 只有打开后才能做其他操作  
//lRet = RegOpenKeyEx(HKEY_LOCAL_MACHINE, keyvalue,
//	0, KEY_QUERY_VALUE, &hKey);
//if (lRet != ERROR_SUCCESS)   // 判断是否打开成功   
//	return 1;
////下面开始查询   

//lRet = RegQueryValueEx(hKey, pathvalue, NULL, NULL,
//	(LPBYTE)szProductType2, &dwBufLen);
//if (lRet != ERROR_SUCCESS)  // 判断是否查询成功
//{
//	return 1;
//}

//lRet = RegQueryValueEx(hKey, versionvalue, NULL, NULL,
//	(LPBYTE)szProductType3, &dwBufLen);
//if (lRet != ERROR_SUCCESS)  // 判断是否查询成功
//{
//	return 1;
//}
//RegCloseKey(hKey);

////读取注册表中的静默安装的path
//char ansipath[MY_BUFSIZE];
//WideCharToMultiByte(CP_ACP, 0, szProductType2, -1, ansipath, sizeof(ansipath), NULL, NULL);
//cout << ansipath <<endl;

////读取注册表中的静默安装的version
//char ansiversion[MY_BUFSIZE];
//WideCharToMultiByte(CP_ACP, 0, szProductType3, -1, ansiversion, sizeof(ansiversion), NULL, NULL);
//cout << ansiversion <<endl;

